### 2 つのベクトルの内積を計算するプログラム (MMX 命令のみ使用)
### (x0, x1, x2, x3), (y0, y1, y2, y3) → x0*y0 + x1*y1 + x2*y2 + x3*y3
	.text
	.global	_start
_start:
	## vec1 番地に格納されたベクトルのデータを MM0 に読み込み
	movq	vec1, %mm0		# MM0 ← [vec1]
	## 積和演算: 対応する要素の積を計算し、隣接するペアの和に集約する
	## 16 ビット(ワード) × 4 → 32 ビット(ダブルワード) × 2 になる
	pmaddwd	vec2, %mm0		# MM0 ← x0*y0+x1*y1 : x2*y2+x3*y3
	## MM0 の上位 32 ビットを下位 32 ビットに加算する
	## レジスタ MM0 の下位 32 ビットが内積となる
	movq	%mm0, %mm1		# MM1 ← MM0
	psrlq	$32, %mm1		# MM1 ← MM1 >> 32
	paddd	%mm1, %mm0		# MM0 ← <+> MM1
	
	movl	$1, %eax		# システムコール 1 番は exit
	int	$0x80			# システムコール呼び出し

	.data
	.align 16			# 16 バイト単位でメモリ配置
vec1:	.word	1, 2, 3, 4		# 16 ビット(ワード) × 4 
vec2:	.word	5, -6, 7, 8		# 16 ビット(ワード) × 4 
